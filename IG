local url = "https://raw.githubusercontent.com/daytonhale1234-beep/HSRV/refs/heads/main/Status"
local success, result = pcall(function()
    return loadstring(game:HttpGet(url))()
end)

if not success then
    warn("Failed to load script: ".. tostring(result))
end

if getgenv().EnabledAB then -- THE GAME NAME HERE SO IF HOOP NATION WOULD BE HN ITS AB RIGHT NOW FOR ARCADE BASKETBALL.
    -- Wait for game to load
if not game:IsLoaded() then
    game.Loaded:Wait()
end

local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local Player = Players.LocalPlayer

-- ═══════════════════════════════════════════════════════════════
-- ESP SYSTEM (EXTRACTED FROM ADVANCED GUI)
-- ═══════════════════════════════════════════════════════════════

local ESP_Objects = {}

-- ESP Configuration
local ESPConfig = {
    Enabled = false,
    MaxDistance = 500,
    Drawing = {
        Names = {
            Enabled = false,
            RGB = Color3.fromRGB(255, 255, 255),
        },
        Distances = {
            Enabled = false,
            RGB = Color3.fromRGB(255, 255, 255),
        },
        Healthbar = {
            Enabled = false,
            HealthText = false,
        },
        Boxes = {
            Full = {
                Enabled = false,
                RGB = Color3.fromRGB(255, 255, 255),
            },
        },
    },
}

local function CreateESP(player)
    if ESP_Objects[player] then
        return
    end

    ESP_Objects[player] = {
        box = Drawing.new('Square'),
        name = Drawing.new('Text'),
        distance = Drawing.new('Text'),
        healthbar = Drawing.new('Line'),
        healthtext = Drawing.new('Text'),
        healthbarback = Drawing.new('Line'),
    }

    local esp = ESP_Objects[player]

    -- Configure box
    esp.box.Color = Color3.fromRGB(255, 255, 255)
    esp.box.Thickness = 2
    esp.box.Transparency = 1
    esp.box.Filled = false
    esp.box.Visible = false

    -- Configure name
    esp.name.Color = Color3.fromRGB(255, 255, 255)
    esp.name.Size = 13
    esp.name.Font = Drawing.Fonts.UI
    esp.name.Center = true
    esp.name.Outline = true
    esp.name.OutlineColor = Color3.fromRGB(0, 0, 0)
    esp.name.Visible = false

    -- Configure distance
    esp.distance.Color = Color3.fromRGB(255, 255, 255)
    esp.distance.Size = 11
    esp.distance.Font = Drawing.Fonts.UI
    esp.distance.Center = true
    esp.distance.Outline = true
    esp.distance.OutlineColor = Color3.fromRGB(0, 0, 0)
    esp.distance.Visible = false

    -- Configure health bar background
    esp.healthbarback.Color = Color3.fromRGB(0, 0, 0)
    esp.healthbarback.Thickness = 5
    esp.healthbarback.Visible = false

    -- Configure health bar
    esp.healthbar.Color = Color3.fromRGB(0, 255, 0)
    esp.healthbar.Thickness = 3
    esp.healthbar.Visible = false

    -- Configure health text
    esp.healthtext.Color = Color3.fromRGB(0, 255, 0)
    esp.healthtext.Size = 10
    esp.healthtext.Font = Drawing.Fonts.UI
    esp.healthtext.Center = true
    esp.healthtext.Outline = true
    esp.healthtext.OutlineColor = Color3.fromRGB(0, 0, 0)
    esp.healthtext.Visible = false
end

local function UpdateESP(player)
    if
        not ESP_Objects[player]
        or not player.Character
        or not player.Character:FindFirstChild('HumanoidRootPart')
    then
        return
    end

    local character = player.Character
    local humanoid = character:FindFirstChild('Humanoid')
    local rootPart = character:FindFirstChild('HumanoidRootPart')
    local head = character:FindFirstChild('Head')

    if not humanoid or not rootPart or not head or humanoid.Health <= 0 then
        for _, obj in pairs(ESP_Objects[player]) do
            if obj and obj.Visible ~= nil then
                obj.Visible = false
            end
        end
        return
    end

    -- Distance check
    local distance = (
        workspace.CurrentCamera.CFrame.Position - rootPart.Position
    ).Magnitude
    if distance > ESPConfig.MaxDistance then
        for _, obj in pairs(ESP_Objects[player]) do
            if obj and obj.Visible ~= nil then
                obj.Visible = false
            end
        end
        return
    end

    -- Get screen position
    local rootPosition, onScreen =
        workspace.CurrentCamera:WorldToViewportPoint(rootPart.Position)
    local headPosition =
        workspace.CurrentCamera:WorldToViewportPoint(head.Position)

    if not onScreen then
        for _, obj in pairs(ESP_Objects[player]) do
            if obj and obj.Visible ~= nil then
                obj.Visible = false
            end
        end
        return
    end

    -- Calculate box size
    local factor = 1
        / (rootPosition.Z * math.tan(
            math.rad(workspace.CurrentCamera.FieldOfView / 2)
        ) * 2)
        * 1000
    local boxWidth = math.clamp(math.floor(40 * factor), 5, 50)
    local boxHeight = math.clamp(math.floor(60 * factor), 5, 75)

    local esp = ESP_Objects[player]

    -- Update box
    if ESPConfig.Drawing.Boxes.Full.Enabled then
        esp.box.Size = Vector2.new(boxWidth, boxHeight)
        esp.box.Position = Vector2.new(
            rootPosition.X - boxWidth / 2,
            rootPosition.Y - boxHeight / 2
        )
        esp.box.Color = ESPConfig.Drawing.Boxes.Full.RGB
        esp.box.Visible = true
    else
        esp.box.Visible = false
    end

    -- Update name
    if ESPConfig.Drawing.Names.Enabled then
        esp.name.Text = player.Name
        esp.name.Position = Vector2.new(rootPosition.X, headPosition.Y - 25)
        esp.name.Color = ESPConfig.Drawing.Names.RGB
        esp.name.Visible = true
    else
        esp.name.Visible = false
    end

    -- Update distance
    if ESPConfig.Drawing.Distances.Enabled then
        esp.distance.Text = math.floor(distance) .. 'm'
        esp.distance.Position =
            Vector2.new(rootPosition.X, rootPosition.Y + boxHeight / 2 + 15)
        esp.distance.Color = ESPConfig.Drawing.Distances.RGB
        esp.distance.Visible = true
    else
        esp.distance.Visible = false
    end

    -- Update health bar
    if ESPConfig.Drawing.Healthbar.Enabled then
        local healthPercent = humanoid.Health / humanoid.MaxHealth
        local barHeight = boxHeight
        local barX = rootPosition.X - boxWidth / 2 - 8
        local barY = rootPosition.Y - boxHeight / 2

        -- Health bar background
        esp.healthbarback.From = Vector2.new(barX, barY)
        esp.healthbarback.To = Vector2.new(barX, barY + barHeight)
        esp.healthbarback.Visible = true

        -- Health bar
        esp.healthbar.From = Vector2.new(barX, barY + barHeight)
        esp.healthbar.To =
            Vector2.new(barX, barY + barHeight - (barHeight * healthPercent))
        esp.healthbar.Color = healthPercent > 0.5 and Color3.fromRGB(0, 255, 0)
            or Color3.fromRGB(255, 0, 0)
        esp.healthbar.Visible = true

        -- Health text
        if ESPConfig.Drawing.Healthbar.HealthText then
            esp.healthtext.Text = math.floor(humanoid.Health)
            esp.healthtext.Position =
                Vector2.new(barX - 15, barY + barHeight / 2)
            esp.healthtext.Color = esp.healthbar.Color
            esp.healthtext.Visible = true
        else
            esp.healthtext.Visible = false
        end
    else
        esp.healthbar.Visible = false
        esp.healthbarback.Visible = false
        esp.healthtext.Visible = false
    end
end

local function RemoveESP(player)
    if ESP_Objects[player] then
        for _, obj in pairs(ESP_Objects[player]) do
            if obj and obj.Remove then
                obj:Remove()
            end
        end
        ESP_Objects[player] = nil
    end
end

-- ESP Player connection handlers
Players.PlayerAdded:Connect(function(player)
    if player ~= Players.LocalPlayer then
        CreateESP(player)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    RemoveESP(player)
end)

-- Initialize ESP for existing players
for _, player in pairs(Players:GetPlayers()) do
    if player ~= Players.LocalPlayer then
        CreateESP(player)
    end
end

-- ═══════════════════════════════════════════════════════════════
-- ORIGINAL SCRIPT CONTINUES WITH ALL FEATURES
-- ═══════════════════════════════════════════════════════════════

-- Global variable initializations
_G.Speed = 50
_G.SetSpeedFly = 50
_G.EspHighlight = false
_G.EspGui = false
_G.EspName = false
_G.EspDistance = false
_G.EspGuiTextSize = 15
_G.EspGuiTextColor = Color3.new(1, 1, 1)
_G.ColorLight = Color3.fromRGB(255, 255, 255)
_G.PartLag = {
    'FootstepEffect',
    'BulletHole',
    'GroundSmokeDIFFERENT',
    'ARshell',
    'effect debris',
    'effect',
    'DroppedMP5',
}

-- Utility functions
game:GetService('UserInputService').JumpRequest:connect(function()
    if _G.InfiniteJump == true then
        game.Players.LocalPlayer.Character
            :FindFirstChildOfClass('Humanoid')
            :ChangeState('Jumping')
    end
end)

game.Players.LocalPlayer.Character
    :FindFirstChild('Humanoid')
    :GetPropertyChangedSignal('WalkSpeed')
    :Connect(function()
        if _G.AutoSpeed == true then
            if
                game.Players.LocalPlayer.Character:FindFirstChild('Humanoid')
            then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = _G.Speed
                    or 50
            end
        end
    end)

function CheckWall(Target)
    local Direction = (
        Target.Position - game.Workspace.CurrentCamera.CFrame.Position
    ).unit * (
        Target.Position - game.Workspace.CurrentCamera.CFrame.Position
    ).Magnitude
    local RaycastParams = RaycastParams.new()
    RaycastParams.FilterDescendantsInstances =
        { game.Players.LocalPlayer.Character, game.Workspace.CurrentCamera }
    RaycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    local Result = game.Workspace:Raycast(
        game.Workspace.CurrentCamera.CFrame.Position,
        Direction,
        RaycastParams
    )
    return Result == nil or Result.Instance:IsDescendantOf(Target)
end

function PartLagDe(g)
    for i, v in pairs(_G.PartLag) do
        if g.Name:find(v) then
            g:Destroy()
        end
    end
end

function HasTool(tool)
    for _, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
        if v:IsA('Tool') and v.Name == tool then
            return true
        end
    end
    for _, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v:IsA('Tool') and v.Name == tool then
            return true
        end
    end
    return false
end

-- Anti-lag workspace event
workspace.DescendantAdded:Connect(function(v)
    if _G.AntiLag == true then
        if
            v:IsA('ForceField')
            or v:IsA('Sparkles')
            or v:IsA('Smoke')
            or v:IsA('Fire')
            or v:IsA('Beam')
        then
            v:Destroy()
        end
        if v:IsA('BasePart') then
            v.Material = 'Plastic'
            v.Reflectance = 0
            v.BackSurface = 'SmoothNoOutlines'
            v.BottomSurface = 'SmoothNoOutlines'
            v.FrontSurface = 'SmoothNoOutlines'
            v.LeftSurface = 'SmoothNoOutlines'
            v.RightSurface = 'SmoothNoOutlines'
            v.TopSurface = 'SmoothNoOutlines'
        elseif v:IsA('Decal') then
            v.Transparency = 1
        elseif v:IsA('ParticleEmitter') or v:IsA('Trail') then
            v.Lifetime = NumberRange.new(0)
        end
    end
end)

-- Load the GUI Library
local Library = loadstring(
    game:HttpGet(
        'https://raw.githubusercontent.com/deividcomsono/Obsidian/refs/heads/main/Library.lua'
    )
)()

-- Create the main window
local Window = Library:CreateWindow({
    Title = 'HolyServices',
    Footer = 'Holyservices - Discord.gg/Holyservices',
    ToggleKeybind = Enum.KeyCode.RightControl,
    Center = true,
    AutoShow = true,
    Icon = '87172502193736',
    IconSize = UDim2.fromOffset(32, 32),
    BackgroundImage = 'rbxassetid://101113658774672',
})

-- Create the tabs
local GameTab =
    Window:AddTab('Game Features', 'gamepad', 'Squid Game specific features')
local MovementTab =
    Window:AddTab('Movement', 'zap', 'Movement and teleportation')
local VisualTab = Window:AddTab('Visuals', 'eye', 'ESP and visual features')
local MiscTab = Window:AddTab('Misc', 'settings', 'Miscellaneous utilities')
local UISettingsTab =
    Window:AddTab('UI Settings', 'palette', 'Customize the interface')

-- Game Features Tab
local RedLightGroup =
    GameTab:AddLeftGroupbox('Green Light, Red Light', 'traffic-light')
local HideSeekGroup = GameTab:AddRightGroupbox('Hide & Seek', 'search')

-- Red Light Green Light features
RedLightGroup:AddButton('Teleport to End', function()
    if
        workspace:FindFirstChild('RedLightGreenLight')
        and workspace.RedLightGreenLight:FindFirstChild('sand')
        and workspace.RedLightGreenLight.sand:FindFirstChild('crossedover')
    then
        local pos = workspace.RedLightGreenLight.sand.crossedover.Position
            + Vector3.new(0, 5, 0)
        Player.Character.HumanoidRootPart.CFrame =
            CFrame.new(pos, pos + Vector3.new(0, 0, -1))
    end
end)

RedLightGroup:AddButton('Help Player to End', function()
    if Loading then
        return
    end
    Loading = true
    for _, v in pairs(game.Players:GetPlayers()) do
        if
            v.Character:FindFirstChild('HumanoidRootPart')
            and v.Character.HumanoidRootPart:FindFirstChild('CarryPrompt')
            and v.Character.HumanoidRootPart.CarryPrompt.Enabled == true
        then
            if v.Character:FindFirstChild('SafeRedLightGreenLight') == nil then
                Player.Character.HumanoidRootPart.CFrame =
                    v.Character.HumanoidRootPart.CFrame
                wait(0.3)
                repeat
                    task.wait(0.1)
                    fireproximityprompt(
                        v.Character.HumanoidRootPart:FindFirstChild(
                            'CarryPrompt'
                        )
                    )
                until v.Character.HumanoidRootPart.CarryPrompt.Enabled == false
                wait(0.5)
                if
                    workspace:FindFirstChild('RedLightGreenLight')
                    and workspace.RedLightGreenLight:FindFirstChild('sand')
                    and workspace.RedLightGreenLight.sand:FindFirstChild(
                        'crossedover'
                    )
                then
                    local pos = workspace.RedLightGreenLight.sand.crossedover.Position
                        + Vector3.new(0, 5, 0)
                    Player.Character.HumanoidRootPart.CFrame =
                        CFrame.new(pos, pos + Vector3.new(0, 0, -1))
                end
                wait(0.4)
                game:GetService('ReplicatedStorage')
                    :WaitForChild('Remotes')
                    :WaitForChild('ClickedButton')
                    :FireServer({ tryingtoleave = true })
                break
            end
        end
    end
    Loading = false
end)

RedLightGroup:AddToggle('AutoHelpPlayer', {
    Text = 'Auto Help Player',
    Default = false,
    Callback = function(Value)
        _G.AutoHelpPlayer = Value
        while _G.AutoHelpPlayer do
            for _, v in pairs(game.Players:GetPlayers()) do
                if
                    v.Character:FindFirstChild('HumanoidRootPart')
                    and v.Character.HumanoidRootPart:FindFirstChild(
                        'CarryPrompt'
                    )
                    and v.Character.HumanoidRootPart.CarryPrompt.Enabled
                        == true
                then
                    if
                        v.Character:FindFirstChild('SafeRedLightGreenLight')
                        == nil
                    then
                        Player.Character.HumanoidRootPart.CFrame =
                            v.Character.HumanoidRootPart.CFrame
                        wait(0.3)
                        repeat
                            task.wait(0.1)
                            fireproximityprompt(
                                v.Character.HumanoidRootPart:FindFirstChild(
                                    'CarryPrompt'
                                )
                            )
                        until v.Character.HumanoidRootPart.CarryPrompt.Enabled
                            == false
                        wait(0.5)
                        if workspace:FindFirstChild('RedLightGreenLight') then
                            Player.Character.HumanoidRootPart.CFrame =
                                CFrame.new(-75, 1025, 143)
                        end
                        wait(0.4)
                        game:GetService('ReplicatedStorage')
                            :WaitForChild('Remotes')
                            :WaitForChild('ClickedButton')
                            :FireServer({ tryingtoleave = true })
                        break
                    end
                end
            end
            task.wait()
        end
    end,
})

RedLightGroup:AddToggle('AutoTrollPlayer', {
    Text = 'Auto Troll Player',
    Default = false,
    Callback = function(Value)
        _G.AutoTrollPlayer = Value
        while _G.AutoTrollPlayer do
            for _, v in pairs(game.Players:GetPlayers()) do
                if
                    v.Character:FindFirstChild('HumanoidRootPart')
                    and v.Character.HumanoidRootPart:FindFirstChild(
                        'CarryPrompt'
                    )
                    and v.Character.HumanoidRootPart.CarryPrompt.Enabled
                        == true
                then
                    if
                        v.Character:FindFirstChild('SafeRedLightGreenLight')
                        == nil
                    then
                        Player.Character.HumanoidRootPart.CFrame =
                            v.Character.HumanoidRootPart.CFrame
                        wait(0.3)
                        repeat
                            task.wait(0.1)
                            fireproximityprompt(
                                v.Character.HumanoidRootPart:FindFirstChild(
                                    'CarryPrompt'
                                )
                            )
                        until v.Character.HumanoidRootPart.CarryPrompt.Enabled
                            == false
                        wait(0.5)
                        if workspace:FindFirstChild('RedLightGreenLight') then
                            Player.Character.HumanoidRootPart.CFrame =
                                CFrame.new(-84, 1023, -537)
                        end
                        wait(0.4)
                        game:GetService('ReplicatedStorage')
                            :WaitForChild('Remotes')
                            :WaitForChild('ClickedButton')
                            :FireServer({ tryingtoleave = true })
                        break
                    end
                end
            end
            task.wait()
        end
    end,
})

-- Dalgona features removed

-- Hide & Seek features (now includes teleportation features)
HideSeekGroup:AddToggle('EspDoorExit', {
    Text = 'ESP Door Exit',
    Default = false,
    Callback = function(Value)
        _G.DoorExit = Value
        while _G.DoorExit do
            if workspace:FindFirstChild('HideAndSeekMap') then
                for i, v in
                    pairs(
                        workspace:FindFirstChild('HideAndSeekMap'):GetChildren()
                    )
                do
                    if v.Name == 'NEWFIXEDDOORS' then
                        for k, m in pairs(v:GetChildren()) do
                            if
                                m.Name:find('Floor')
                                and m:FindFirstChild('EXITDOORS')
                            then
                                for _, a in
                                    pairs(
                                        m:FindFirstChild('EXITDOORS')
                                            :GetChildren()
                                    )
                                do
                                    if
                                        a:IsA('Model')
                                        and a:FindFirstChild('DoorRoot')
                                    then
                                        if
                                            _G.EspHighlight == true
                                            and a.DoorRoot:FindFirstChild(
                                                    'Esp_Highlight'
                                                )
                                                == nil
                                        then
                                            local Highlight =
                                                Instance.new('Highlight')
                                            Highlight.Name = 'Esp_Highlight'
                                            Highlight.FillColor = _G.ColorLight
                                                or Color3.fromRGB(255, 255, 255)
                                            Highlight.OutlineColor = _G.ColorLight
                                                or Color3.fromRGB(255, 255, 255)
                                            Highlight.FillTransparency = 0.5
                                            Highlight.OutlineTransparency = 0
                                            Highlight.Adornee = a
                                            Highlight.Parent = a.DoorRoot
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            task.wait()
        end
    end,
})

HideSeekGroup:AddButton('Teleport to All Keys', function()
    local OldCFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
    for _, a in pairs(workspace.Effects:GetChildren()) do
        if a.Name:find('DroppedKey') and a:FindFirstChild('Handle') then
            if
                game.Players.LocalPlayer.Character:FindFirstChild('Head')
                and game.Players.LocalPlayer.Character:FindFirstChild(
                    'HumanoidRootPart'
                )
                and game.Players.LocalPlayer.Character:FindFirstChild(
                    'Humanoid'
                )
            then
                if
                    game.Players.LocalPlayer:GetAttribute('IsHider')
                    and game.Players.LocalPlayer.Character.Humanoid.Health
                        > 0
                then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                        a:FindFirstChild('Handle').CFrame
                    wait(0.5)
                end
            end
        end
    end
    if
        game.Players.LocalPlayer.Character:FindFirstChild('Head')
        and game.Players.LocalPlayer.Character:FindFirstChild(
            'HumanoidRootPart'
        )
    then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = OldCFrame
    end
end)

-- Moved teleportation features to Hide & Seek group
HideSeekGroup:AddToggle('CamlockPlayer', {
    Text = 'Camlock Player',
    Default = false,
    Keybind = 'K',
    Callback = function(Value)
        _G.CamlockPlayer = Value
        task.spawn(function()
            while _G.CamlockPlayer do
                local DistanceMath, TargetPlayer = math.huge, nil
                for i, v in pairs(game.Players:GetChildren()) do
                    if
                        v ~= game.Players.LocalPlayer
                        and game.Players.LocalPlayer.Character
                        and game.Players.LocalPlayer.Character:FindFirstChild(
                            'HumanoidRootPart'
                        )
                        and v.Character
                    then
                        if
                            v.Character:FindFirstChild('Head')
                            and v.Character:FindFirstChild('Humanoid')
                            and v.Character:FindFirstChild('HumanoidRootPart')
                        then
                            local Distance = (
                                game.Players.LocalPlayer.Character.HumanoidRootPart.Position
                                - v.Character.HumanoidRootPart.Position
                            ).Magnitude
                            if Distance < DistanceMath then
                                TargetPlayer, DistanceMath =
                                    v.Character, Distance
                            end
                        end
                    end
                end
                if
                    TargetPlayer
                    and TargetPlayer:FindFirstChild('HumanoidRootPart')
                then
                    game.Workspace.CurrentCamera.CFrame = CFrame.lookAt(
                        game.Workspace.CurrentCamera.CFrame.Position,
                        game.Workspace.CurrentCamera.CFrame.Position
                            + (
                                TargetPlayer.HumanoidRootPart.Position
                                - game.Workspace.CurrentCamera.CFrame.Position
                            ).unit
                    )
                end
                task.wait()
            end
        end)
    end,
})

HideSeekGroup:AddToggle('AutoTeleportHide', {
    Text = 'Auto TP to Hiders',
    Default = false,
    Callback = function(Value)
        _G.AutoTeleportHide = Value
        task.spawn(function()
            while _G.AutoTeleportHide do
                for i, v in pairs(game.Players:GetChildren()) do
                    if
                        v ~= game.Players.LocalPlayer
                        and v.Character
                        and v.Character:FindFirstChild('Head')
                        and v.Character:FindFirstChild('HumanoidRootPart')
                        and v.Character:FindFirstChild('Humanoid')
                    then
                        if
                            v:GetAttribute('IsHider')
                            and v.Character.Humanoid.Health > 0
                        then
                            if
                                v.Character:FindFirstChild('Humanoid')
                                and v.Character.Humanoid.MoveDirection.Magnitude
                                    > 0
                            then
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Character:FindFirstChild(
                                    'HumanoidRootPart'
                                ).CFrame * CFrame.new(
                                    0,
                                    0,
                                    -7
                                )
                            else
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                                    v.Character:FindFirstChild(
                                        'HumanoidRootPart'
                                    ).CFrame
                            end
                            break
                        end
                    end
                end
                task.wait()
            end
        end)
    end,
})

-- More game features
local OtherGamesGroup = GameTab:AddLeftGroupbox('Other Games', 'target')

OtherGamesGroup:AddButton('Complete Jump Rope', function()
    if workspace:WaitForChild('JumpRope') then
        local pos = workspace.JumpRope.Important.Model.LEGS.Position
        Player.Character.HumanoidRootPart.CFrame =
            CFrame.new(pos, pos + Vector3.new(0, 0, -1))
    end
end)

OtherGamesGroup:AddButton('Complete Glass Bridge', function()
    if workspace:WaitForChild('GlassBridge') then
        local pos = workspace.GlassBridge.End.PrimaryPart.Position
            + Vector3.new(0, 8, 0)
        Player.Character.HumanoidRootPart.CFrame =
            CFrame.new(pos, pos + Vector3.new(0, 0, -1))
    end
end)

OtherGamesGroup:AddButton('Glass Bridge Vision', function()
    local GlassHolder =
        workspace:WaitForChild('GlassBridge'):WaitForChild('GlassHolder')
    for i, v in pairs(GlassHolder:GetChildren()) do
        for k, j in pairs(v:GetChildren()) do
            if j:IsA('Model') and j.PrimaryPart then
                local Color = j.PrimaryPart:GetAttribute('exploitingisevil')
                        and Color3.fromRGB(248, 87, 87)
                    or Color3.fromRGB(28, 235, 87)
                j.PrimaryPart.Color = Color
                j.PrimaryPart.Transparency = 0
                j.PrimaryPart.Material = Enum.Material.Neon
            end
        end
    end
end)

-- Combat features
local CombatGroup = GameTab:AddLeftGroupbox('Combat (Rebel)', 'sword')

CombatGroup:AddToggle('WallCheck', {
    Text = 'Wall Check',
    Default = false,
    Callback = function(Value)
        _G.WallCheck = Value
    end,
})

CombatGroup:AddToggle('AimbotGuard', {
    Text = 'Aimbot Guard',
    Default = false,
    Callback = function(Value)
        _G.Aimbot = Value
        while _G.Aimbot do
            local DistanceMath, TargetNpc = math.huge, nil
            for i, v in pairs(workspace.Live:GetChildren()) do
                if v.Name:find('Guard') or v.Name:find('Third') then
                    if
                        v:FindFirstChild('Humanoid')
                        and v:FindFirstChild('HumanoidRootPart')
                        and v.Humanoid.Health > 0
                    then
                        if
                            _G.WallCheck == true
                            and not CheckWall(v:FindFirstChild('Head'))
                        then
                            continue
                        end
                        local Distance = (
                            game.Players.LocalPlayer.Character:FindFirstChild(
                                'HumanoidRootPart'
                            ).Position
                            - v.HumanoidRootPart.Position
                        ).Magnitude
                        if Distance < DistanceMath then
                            TargetNpc, DistanceMath = v, Distance
                        end
                    end
                end
            end
            if TargetNpc then
                if
                    game.Players.LocalPlayer.Character:FindFirstChild(
                        'HumanoidRootPart'
                    )
                    and TargetNpc:FindFirstChild('Head')
                    and TargetNpc:FindFirstChild('Humanoid')
                then
                    game.Workspace.CurrentCamera.CFrame = CFrame.lookAt(
                        game.Workspace.CurrentCamera.CFrame.Position,
                        game.Workspace.CurrentCamera.CFrame.Position
                            + (
                                TargetNpc['Head'].Position
                                - game.Workspace.CurrentCamera.CFrame.Position
                            ).unit
                    )
                end
            end
            task.wait()
        end
    end,
})

CombatGroup:AddToggle('BringGuard', {
    Text = 'Bring Guard',
    Default = false,
    Callback = function(Value)
        _G.Bring = Value
        while _G.Bring do
            for i, v in pairs(workspace.Live:GetChildren()) do
                if v.Name:find('Guard') or v.Name:find('Third') then
                    if
                        v:FindFirstChild('Humanoid')
                        and v:FindFirstChild('HumanoidRootPart')
                        and v.Humanoid.Health > 0
                    then
                        v.HumanoidRootPart.CFrame = Player.Character.HumanoidRootPart.CFrame
                            * CFrame.new(0, 0, -6)
                    end
                end
            end
            task.wait()
        end
    end,
})

CombatGroup:AddToggle('InfAmmo', {
    Text = 'Infinite Ammo',
    Default = false,
    Callback = function(Value)
        _G.InfAmmo = Value
        while _G.InfAmmo do
            for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                if
                    v.Name == 'InfoMP5Client' and v:FindFirstChild('Bullets')
                then
                    v.Bullets.Value = 999999999
                end
            end
            task.wait()
        end
    end,
})

-- Movement Tab
local MovementGroup = MovementTab:AddLeftGroupbox('Movement', 'zap')
local TeleportGroup = MovementTab:AddRightGroupbox('Teleportation', 'move')

MovementGroup:AddSlider('WalkSpeed', {
    Text = 'Walk Speed',
    Default = 50,
    Min = 16,
    Max = 1000,
    Rounding = 0,
    Callback = function(Value)
        _G.Speed = Value
        if
            _G.AutoSpeed
            and game.Players.LocalPlayer.Character:FindFirstChild('Humanoid')
        then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
        end
    end,
})

MovementGroup:AddToggle('AutoSpeed', {
    Text = 'Auto Speed',
    Default = false,
    Callback = function(Value)
        _G.AutoSpeed = Value
        if game.Players.LocalPlayer.Character:FindFirstChild('Humanoid') then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = _G.Speed
                or 50
        end
    end,
})

MovementGroup:AddSlider('FlySpeed', {
    Text = 'Fly Speed',
    Default = 50,
    Min = 20,
    Max = 500,
    Rounding = 0,
    Callback = function(Value)
        _G.SetSpeedFly = Value
    end,
})

MovementGroup:AddToggle('Fly', {
    Text = 'Fly',
    Default = false,
    Keybind = 'R',
    Callback = function(Value)
        _G.StartFly = Value
        task.spawn(function()
            while _G.StartFly do
                if
                    game.Players.LocalPlayer.Character
                    and game.Players.LocalPlayer.Character:FindFirstChild(
                        'HumanoidRootPart'
                    )
                then
                    if
                        game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild(
                            'BodyGyro'
                        ) == nil
                    then
                        local bg = Instance.new(
                            'BodyGyro',
                            game.Players.LocalPlayer.Character.HumanoidRootPart
                        )
                        bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
                        bg.P = 9e4
                        bg.CFrame =
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                    end
                    if
                        game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild(
                            'BodyVelocity'
                        ) == nil
                    then
                        local bv = Instance.new(
                            'BodyVelocity',
                            game.Players.LocalPlayer.Character.HumanoidRootPart
                        )
                        bv.Velocity = Vector3.new(0, 0, 0)
                        bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
                    end
                end
                task.wait()
            end

            -- Clean up when disabled
            if
                game.Players.LocalPlayer.Character
                and game.Players.LocalPlayer.Character:FindFirstChild(
                    'HumanoidRootPart'
                )
            then
                if
                    game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild(
                        'BodyGyro'
                    )
                then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.BodyGyro:Destroy()
                end
                if
                    game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild(
                        'BodyVelocity'
                    )
                then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.BodyVelocity:Destroy()
                end
            end
        end)
    end,
})

MovementGroup:AddToggle('Noclip', {
    Text = 'Noclip',
    Default = false,
    Keybind = 'G',
    Callback = function(Value)
        _G.NoclipCharacter = Value
        task.spawn(function()
            while _G.NoclipCharacter do
                if game.Players.LocalPlayer.Character ~= nil then
                    for i, v in
                        pairs(game.Players.LocalPlayer.Character:GetChildren())
                    do
                        if v:IsA('BasePart') then
                            v.CanCollide = false
                        end
                    end
                end
                task.wait()
            end

            -- Restore collision when disabled
            if game.Players.LocalPlayer.Character ~= nil then
                for i, v in
                    pairs(game.Players.LocalPlayer.Character:GetChildren())
                do
                    if v:IsA('BasePart') then
                        v.CanCollide = true
                    end
                end
            end
        end)
    end,
})

MovementGroup:AddToggle('InfiniteJump', {
    Text = 'Infinite Jump',
    Default = false,
    Keybind = 'J',
    Callback = function(Value)
        _G.InfiniteJump = Value
    end,
})

-- Visual Tab with Enhanced ESP
local EspGroup = VisualTab:AddLeftGroupbox('ESP Settings', 'eye')
local EspOptionsGroup = VisualTab:AddRightGroupbox('ESP Options', 'settings')

-- Enhanced ESP Controls
EspGroup:AddToggle('EnableESP', {
    Text = 'Enable ESP',
    Default = false,
    Callback = function(Value)
        ESPConfig.Enabled = Value
        if not Value then
            -- Disable all ESP when turned off
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= Players.LocalPlayer and ESP_Objects[player] then
                    for _, obj in pairs(ESP_Objects[player]) do
                        if obj and obj.Visible ~= nil then
                            obj.Visible = false
                        end
                    end
                end
            end
        end
    end,
})

EspGroup:AddSlider('MaxDistance', {
    Text = 'Max Distance',
    Default = 500,
    Min = 100,
    Max = 2000,
    Rounding = 0,
    Callback = function(Value)
        ESPConfig.MaxDistance = Value
    end,
})

EspOptionsGroup:AddToggle('ShowBoxes', {
    Text = 'Show Boxes',
    Default = false,
    Callback = function(Value)
        ESPConfig.Drawing.Boxes.Full.Enabled = Value
        _G.EspHighlight = Value
    end,
})

EspOptionsGroup:AddLabel('Box Color'):AddColorPicker('BoxColor', {
    Default = Color3.fromRGB(255, 255, 255),
    Title = 'Box Color',
    Callback = function(Value)
        ESPConfig.Drawing.Boxes.Full.RGB = Value
        _G.ColorLight = Value
    end,
})

EspOptionsGroup:AddToggle('ShowNames', {
    Text = 'Show Names',
    Default = false,
    Callback = function(Value)
        ESPConfig.Drawing.Names.Enabled = Value
        _G.EspName = Value
    end,
})

EspOptionsGroup:AddToggle('ShowDistance', {
    Text = 'Show Distance',
    Default = false,
    Callback = function(Value)
        ESPConfig.Drawing.Distances.Enabled = Value
        _G.EspDistance = Value
    end,
})

EspOptionsGroup:AddToggle('ShowHealthBar', {
    Text = 'Health Bar',
    Default = false,
    Callback = function(Value)
        ESPConfig.Drawing.Healthbar.Enabled = Value
    end,
})

EspOptionsGroup:AddToggle('ShowHealthText', {
    Text = 'Health Text',
    Default = false,
    Callback = function(Value)
        ESPConfig.Drawing.Healthbar.HealthText = Value
    end,
})

-- ESP for Hiding Players
EspOptionsGroup:AddToggle('EspPlayerHide', {
    Text = 'ESP Hiding Players',
    Default = false,
    Callback = function(Value)
        _G.HidePlayer = Value
    end,
})

-- ESP for Seeking Players
EspOptionsGroup:AddToggle('EspPlayerSeek', {
    Text = 'ESP Seeking Players',
    Default = false,
    Callback = function(Value)
        _G.SeekPlayer = Value
    end,
})

-- ESP for Keys
EspOptionsGroup:AddToggle('EspKey', {
    Text = 'ESP Keys',
    Default = false,
    Callback = function(Value)
        _G.DoorKey = Value
    end,
})

-- Misc Tab
local MiscGroup = MiscTab:AddLeftGroupbox('Miscellaneous', 'settings')
local CollectionGroup = MiscTab:AddRightGroupbox('Auto Collection', 'package')

MiscGroup:AddToggle('AutoSkip', {
    Text = 'Auto Skip Dialogues',
    Default = false,
    Callback = function(Value)
        _G.AutoSkip = Value
        task.spawn(function()
            while _G.AutoSkip do
                game:GetService('ReplicatedStorage')
                    :WaitForChild('Remotes')
                    :WaitForChild('DialogueRemote')
                    :FireServer('Skipped')
                game:GetService('ReplicatedStorage')
                    :WaitForChild('Remotes')
                    :WaitForChild('TemporaryReachedBindable')
                    :FireServer()
                task.wait(0.8)
            end
        end)
    end,
})

MiscGroup:AddToggle('NoCooldownProximity', {
    Text = 'No Proximity Cooldown',
    Default = false,
    Callback = function(Value)
        _G.NoCooldownProximity = Value
        if _G.NoCooldownProximity == true then
            for i, v in pairs(workspace:GetDescendants()) do
                if v.ClassName == 'ProximityPrompt' then
                    v.HoldDuration = 0
                end
            end
        end
    end,
})

MiscGroup:AddToggle('AntiFling', {
    Text = 'Anti Fling',
    Default = false,
    Callback = function(Value)
        _G.AntiFling = Value
        task.spawn(function()
            while _G.AntiFling do
                for i, v in pairs(game.Players:GetChildren()) do
                    if v ~= game.Players.LocalPlayer and v.Character then
                        for _, k in pairs(v.Character:GetChildren()) do
                            if k:IsA('BasePart') then
                                k.CanCollide = false
                            end
                        end
                    end
                end
                task.wait()
            end
        end)
    end,
})

MiscGroup:AddToggle('AntiBanana', {
    Text = 'Anti Banana',
    Default = false,
    Callback = function(Value)
        _G.AntiBanana = Value
        task.spawn(function()
            while _G.AntiBanana do
                if workspace:FindFirstChild('Effects') then
                    for i, v in
                        pairs(workspace:FindFirstChild('Effects'):GetChildren())
                    do
                        if v.Name:find('Banana') then
                            v:Destroy()
                        end
                    end
                end
                task.wait()
            end
        end)
    end,
})

MiscGroup:AddToggle('AntiLag', {
    Text = 'Anti Lag',
    Default = false,
    Callback = function(Value)
        _G.AntiLag = Value
        if _G.AntiLag == true then
            local Terrain = workspace:FindFirstChildOfClass('Terrain')
            if Terrain then
                Terrain.WaterWaveSize = 0
                Terrain.WaterWaveSpeed = 0
                Terrain.WaterReflectance = 0
                Terrain.WaterTransparency = 1
            end
            game.Lighting.GlobalShadows = false
            game.Lighting.FogEnd = 9e9
            game.Lighting.FogStart = 9e9
            for i, v in pairs(game:GetDescendants()) do
                if v:IsA('BasePart') then
                    v.Material = 'Plastic'
                    v.Reflectance = 0
                elseif v:IsA('Decal') then
                    v.Transparency = 1
                elseif v:IsA('ParticleEmitter') or v:IsA('Trail') then
                    v.Lifetime = NumberRange.new(0)
                end
            end
        end
    end,
})

-- Collection features
CollectionGroup:AddToggle('CollectBandage', {
    Text = 'Auto Collect Bandages',
    Default = false,
    Callback = function(Value)
        _G.CollectBandage = Value
        task.spawn(function()
            while _G.CollectBandage do
                if
                    not HasTool('Bandage')
                    and game.Players.LocalPlayer.Character
                    and game.Players.LocalPlayer.Character:FindFirstChild(
                        'HumanoidRootPart'
                    )
                then
                    local OldCFrame =
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                    if workspace:FindFirstChild('Effects') then
                        for _, v in
                            pairs(
                                workspace
                                    :FindFirstChild('Effects')
                                    :GetChildren()
                            )
                        do
                            if
                                v.Name == 'DroppedBandage'
                                and v:FindFirstChild('Handle')
                            then
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                                    v.Handle.CFrame
                                task.wait(0.3)
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                                    OldCFrame
                                break
                            end
                        end
                    end
                end
                task.wait()
            end
        end)
    end,
})

CollectionGroup:AddToggle('CollectFlashbang', {
    Text = 'Auto Collect Flashbangs',
    Default = false,
    Callback = function(Value)
        _G.CollectFlashbang = Value
        task.spawn(function()
            while _G.CollectFlashbang do
                if
                    not HasTool('Flashbang')
                    and game.Players.LocalPlayer.Character
                    and game.Players.LocalPlayer.Character:FindFirstChild(
                        'HumanoidRootPart'
                    )
                then
                    local OldCFrame =
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                    if workspace:FindFirstChild('Effects') then
                        for _, v in
                            pairs(
                                workspace
                                    :FindFirstChild('Effects')
                                    :GetChildren()
                            )
                        do
                            if
                                v.Name == 'DroppedFlashbang'
                                and v:FindFirstChild('Stun Grenade')
                            then
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                                    v['Stun Grenade'].CFrame
                                task.wait(0.3)
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                                    OldCFrame
                                break
                            end
                        end
                    end
                end
                task.wait()
            end
        end)
    end,
})

CollectionGroup:AddToggle('CollectGrenade', {
    Text = 'Auto Collect Grenades',
    Default = false,
    Callback = function(Value)
        _G.CollectGrenade = Value
        task.spawn(function()
            while _G.CollectGrenade do
                if
                    not HasTool('Grenade')
                    and game.Players.LocalPlayer.Character
                    and game.Players.LocalPlayer.Character:FindFirstChild(
                        'HumanoidRootPart'
                    )
                then
                    local OldCFrame =
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                    if workspace:FindFirstChild('Effects') then
                        for _, v in
                            pairs(
                                workspace
                                    :FindFirstChild('Effects')
                                    :GetChildren()
                            )
                        do
                            if
                                v.Name == 'DroppedGrenade'
                                and v:FindFirstChild('Handle')
                            then
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                                    v.Handle.CFrame
                                task.wait(0.3)
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                                    OldCFrame
                                break
                            end
                        end
                    end
                end
                task.wait()
            end
        end)
    end,
})

-- UI Settings Tab Configuration
local ThemeGroupbox = UISettingsTab:AddLeftGroupbox('Theme Colors', 'palette')
local InfoGroupbox = UISettingsTab:AddRightGroupbox('Information', 'info')

-- Theme color pickers
local BackgroundLabel = ThemeGroupbox:AddLabel('Background Color')
BackgroundLabel:AddColorPicker('BackgroundColor', {
    Default = Library.Scheme.BackgroundColor,
    Title = 'Background Color',
    Callback = function(Value)
        Library.Scheme.BackgroundColor = Value
        Library:UpdateColorsUsingRegistry()
    end,
})

local MainLabel = ThemeGroupbox:AddLabel('Main Color')
MainLabel:AddColorPicker('MainColor', {
    Default = Library.Scheme.MainColor,
    Title = 'Main Color',
    Callback = function(Value)
        Library.Scheme.MainColor = Value
        Library:UpdateColorsUsingRegistry()
    end,
})

local AccentLabel = ThemeGroupbox:AddLabel('Accent Color')
AccentLabel:AddColorPicker('AccentColor', {
    Default = Library.Scheme.AccentColor,
    Title = 'Accent Color',
    Callback = function(Value)
        Library.Scheme.AccentColor = Value
        Library:UpdateColorsUsingRegistry()
    end,
})

-- Set default theme colors
Library.Scheme.AccentColor = Color3.fromHex('#ff00b8')
Library.Scheme.BackgroundColor = Color3.fromHex('#0a0a0a')
Library:UpdateColorsUsingRegistry()

-- Information section
InfoGroupbox:AddLabel('Script: discord.gg/holyservices')
InfoGroupbox:AddLabel('Version: 1.0 - Enhanced ESP')
InfoGroupbox:AddLabel('Creator: Holy')

InfoGroupbox:AddButton('Copy Discord', function()
    if setclipboard then
        setclipboard('dsc.gg/holyservices')
        Library:Notify('Discord link copied to clipboard!')
    end
end)

InfoGroupbox:AddButton('Copy Link', function()
    if setclipboard then
        setclipboard('Discord.gg/holyservices')
        Library:Notify('Link copied to clipboard!')
    end
end)

InfoGroupbox:AddButton('Unload Script', function()
    Library:Unload()
end)

-- ESP Update Loop
RunService.Heartbeat:Connect(function()
    if ESPConfig.Enabled then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= Players.LocalPlayer then
                CreateESP(player)
                UpdateESP(player)
            end
        end
    else
        -- Hide all ESP when disabled
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= Players.LocalPlayer and ESP_Objects[player] then
                for _, obj in pairs(ESP_Objects[player]) do
                    if obj and obj.Visible ~= nil then
                        obj.Visible = false
                    end
                end
            end
        end
    end
end)

-- Initialize the GUI
Library:Initialize()

-- Character respawn handling
Player.CharacterAdded:Connect(function()
    wait(1)
    -- Reset any character-specific settings
end)

print('🔥 Holy Services Enhanced Script Loaded! 🔥')
print('✨ All Features Included:')
print('• Enhanced ESP System with Drawing API')
print('• Red Light Green Light (Help/Troll Players)')
print('• Hide & Seek ESP with Camlock & Auto TP')
print('• Glass Bridge Vision & Completion')
print('• Jump Rope Completion')
print('• Combat Features (Aimbot, Bring Guards, Infinite Ammo)')
print('• Movement (Speed, Fly, Noclip, Infinite Jump)')
print('• Auto Collection (Bandages, Flashbangs, Grenades)')
print('• Anti-Features (Lag, Fling, Banana)')
print('• Auto Skip Dialogues')
print('• No Proximity Cooldown')
print('')
print('📋 Controls:')
print('• RightControl - Toggle GUI')
print('• R - Fly Toggle')
print('• G - Noclip Toggle')
print('• J - Infinite Jump Toggle')
print('• K - Camlock Toggle')
print('')
print('💬 Discord: discord.gg/holyservices')

else 
    print("FAILED LOADING SCRIPT... ❌")
end 
